Basics
-------

Focus on Single Page Application

SPA- Don't need to reload the page during it's use.

Follows MVC

write code in Type Script

Auto generate template

Packed with a lot of modules(Use modules for almost everything)

Requirement:
- Node Js
- Docs - https://angular.io/docs
- TypeScirpt - https://www.typescriptlang.org/
- GitHub - https://github.com/angular/angular
- Angular CLI(Refer documentation)

Everything is inserted into the app-root component in html file.

Every component needs to have a decorator to edify template functionality.

style affects globally, component.style only affects the component.

It is a good practice to create all the components inside the app folder.

It is a good practice to give app- as a prefix to angular component selectors.

Angular have a change detection mechanism that will identify and implement all the changes in the DOM in real time without reloading.

Angular directives - Component, structural, attribute, custom
-Structural directives - Shape the DOM by adding or removing elements.
 =Can be identified by leading * symbol.
-Attribute directives - Change the appearence of DOM elements
-The number pipe converts a number into end user readable form
-Currency pipe will add currency symbol
-Percent pipe will multiply given number by 100, round, and give us the percentage.
 =We can control the decimal and integer numbers.

Angular Service - Used to share data between components where there is no parent-child relationship

Form types in angular - template driven form(use ngForm) and reactive form(Hand code from scratch)

Routing - Navigating between pages.
-Steps to implement angular routing:
 =Configure the routes
 =Add Router-Outlet
 =Add Navigation link paths

Observable - Sequence of data that is emitted asynchronously or synchronously over a period of time.

Synchronous program - Code executed in a sequence
-Asynchronous program - Does not have to wait for the previous code to finish execution

Syntax
-------

To inject a variable into the page, define the variable in the components ts file and use the variable in the components html file.

To use a variable in the html file, use {{var_name}}

To create a constructor, just use the method constructor()

While defining a new model,
- Create an html component
- Create a style component
- Create a model ts file
  = export interface interface_name{} => This contains definition of the model.
  = Import the interface into the controller file.
  = import {} from file_name
- The controller goes in the component.ts file.

Most of the angular methods have ng as prefix
-ngOnInit()

inside the tag, (click) -> onClick()
-(click)="fn()"

(keyup.enter) -> When content is wrote and enter key is pressed.

You need to import all the modules that you are going to use in the module.ts file.
-For forms, import {module_name} from "angular/forms";
-Also, fill the declarations with declarations that you have used and imports with modules you have imported.
-Import animation while deleting

Looping - *ngFor="let var of sequence"
-*ngFor="let item of list"

To assign a class to an element, use [class]
-<p [class] = "example-class">

To import a component, put this in the main component - import class_name from 'path'
-Also add export keyword before the class defn

To put a component inside an angular pgm, put an html element inside the parent component and give that element as the selector for the new component.
While adding a new component, inside the component decorator, add a tag called template, to add html code. Add a tag called styles to add css code.
-To give src file, use templateUrl instead of template and styleUrl instead of style.

ng g c comp_name -> Create component

@Input decorator - used to share data between parent to child component
-In the child slot tag of the parent component html sheet, add the attribute,
 =[fromParent]="variable_name"
-In the child component, import input module.
-Use the decorator inside the class
 =@Input() fromParent: data_type;

@viewChild - used to share data between child to parent component
-Import viewChild module in the parent component
-Use the decorator inside the class
 =@viewChild(data) var_name;

AfterViewInit - Will be executed once the view is initialized.
-import AfterViewInit from core
-class implements AfterViewInit
-AfterViewInit(){}

With the viewChild decorator, you can pull the whole items of a component.

@output Decorator and event Emitter - Pass data between child to parent component when there is an event.
-Import output and EventEmitter in the component
-output messageEvent = new EventEmitter <string>()
-this.messageEvent.emit(this.outputChildMessage)
-In the parent html slot, add this attribute
 = (messageEvent)='receiveMessage($event)'

Property Binding - put an attribute inside sq brackets and pass a variable as value.
-[src] = "imgUrl"

Class binding - A class is activated only when the given boolean value is true.
-[class.class_name] = boolean_variable

Inline style binding - Give style and value
-[style.style] = "boolean_variable ? 'value1' : 'value2'";
-Only pass DOM style object properties and values.

For event binding, use () and for data binding, use []

In event binding, we can pass the event in the fn, $event. Inside the event variable, there will be all the info about the event.
-To find out which key in pressed on keyup event, check the key code with $event.keyCode
-To get value from event obj, $event.target.value

To create a template variable, use the #var_name as an attribute in an html input tag.
-<input #username>
-You can pass the value directly as a parameter by using a template variable.
 =onInput(username.value)

Angular Directive - Used to manipulate the DOM, but they don't have a view.

To display an object in the view, we need to specify the type along with it.
-{{obj | json}}

While defining a *ngFor loop, we can keep track of the index number
-*ngFor = "let post of objArray, let i = index"

*ngIf -> If statement
-This could be put inside a tag, in which case the tag would be visible iff the condition returns true.
-<div *ngIf = "array.length > 0;then postList else noData">
 =Where postList and noData is a template variable of an <ng-template> tag
 =We can only use the <ng-template> tag with a structural directive.

ngSwitch -> Switch statement
-In a parent div with several child elements, we can use switch case operations associated with a variable
 =<div [ngSwitch] = "var_name"> => Parent
 =<div *ngSwitchCase = "condition_1"> => child
 =<div *ngSwitchDefault> => Default case

NgStyle -> To give multiple styles dynamically based on condition
-[NgStyle] = "{color: isActive ? 'Red' : 'Black'}"

ngClass -> To bing multiple class to same element based on condition
-[ngClass] = "{'class_name': condition}"

| - Pipe operator.
-var_name | uppercase
-With number pipe, we can pass int count and min and max dec count.
 =var_name | number: 'int_count.min_dec_count-max_dec_count'
-With currency pipe, we can pass currency code.
 =var_name | currency: 'currency_code': bool_value: 'int_count.min_dec_count-max_dec_count'
 =If bool_value is true, currency symbol is displayed. Otherwise, currency code is displayed.
-With date pipe, we can pass an argument
 =var_name | date: 'arg'
 =To get the arg list and properties, visit ang official documentation.
-We cannot directly display an object in the view. For that, we need to convert it to json

To create an array,
-var_name: Array<data_type>

Use the slice pipe to slice an array
-array_name | slice : start_index : end_index

To create a custom pipe,
-Create a folder inside app folder
-create the pipe file with pipe.ts as postfix
-import Pipe and PipeTransform
-Create a decorator and pass the pipe name
 =@Pipe({name: "append"})
-Create a type script class implements PipeTransform
 =This must have the method transform
-The transform method must have value: any parameter and optionally can have an args: any parameter
 =To specify that the args are optional, put a question mark in the defn
-Registor in the module.ts

In the CLI, add the commmand
-ng g pipe path/pipe_name
-To generate a custom pipe

string_var.substring(first_index, last_index)

To create a service,
-Create a folder
-Create a service file with .service.ts extension
-Create a class and put data and methods in it that you want to share
-Import this inside the component

Dependancy injection - We can manage the dependancy by directly assigning the service instance to a variable while calling the constructor by using a parameter.
-constructor(private postService: PostService)
-For this to work, add the key-value, providers: [class_name] in the @component decorator in the component.ts file.
 =This is to specify to angular that this is an injectable class
 =Instead of this, you can specify this in the app.module.ts file to make it reflect globally instead of repeating it for each component
-Otherwise, we can add an injector decorator to the service so that it is injectable for all components.
 =Import Injectable in the service
 =Add Injectable decorator
 =Add key, provideIn and value, 'root'
 =@Injectable({provideIn: 'root'})

To create service using the angular cli
-ng g s path/file_name

Interface - Used to create a blueprint of an object for debugging
-Put all interfaces in models folder
-CLI - ng g i path/interface_name
-Inside the interface, all keys become required.
 =To make a key optional, add a question mark after the key name

For template driven form submission, create a template variable for the form tag and assign it the value of ngForm.
-Create an even (submit) and pass the template variable in the function.
-<form #f = 'ngForm' (submit) = 'onSubmit(f)'>
-while defining the function, make the variable type as ngForm
-We get a dictionary of every details regarding ngForm on f.

formGroup class - form tag
-formControl class - each fields

To create instance of formGroup and formControl class, 
-Use the ngForm syntax in the form tag
-Use the ngModel in the fields
-To use ngModel inside form tag, name attribute is mandatory.
-Once it is done, the template variable will have the values as key-value pairs where keys are the names of the corresponding tags.
-<input ngModel>

FormControl has two attributes called valid and invalid. We can check the validity of a form using these. If a form is set to required,
-If there is no value, it is invalid and there is value, it is valid.

FormControl has a property called touched which becomes true when the user accesses a field and moves away

&& - And operator

Angular adds css class to items, and we can find it in the inspector and use it

FormControl has a property called errors within which you can find all the errors.

For form submission, angular has a directive, ngSubmit

Use the disabled property in property binding to disable a certain element if it meets a certain condition
-[disabled] = 'f.invalid'

To use reactive forms,
-import ReactiveForms module
-import FromGroup and FormControl
-Create an instance of FormGroup and pass an object with key-value for each of the elements in the form
 =As values, create a FormControl instance for each of the keys.
-Use property binding to attch this object with the actual form
 =Use formGroup property for the process
 =<form formGroup = 'form'>
-Also, assign each key in the FormControl object to the relevent elements of the form using formControlName property
 =formControlName = 'fullName'
-We can pass parameters from FormControl instance to find the errors
 =We need to pass an empty string as a default value
 =new FormControl('', validators.required)

To get value from a form, we can write a getter method
-get method_name(){ return this.form.get('key_name')}

We can create form group inside form group in reactive form group
-Put all the required fields into a div and add the formGroupName attribute to the div.

We can store multiple values from form where number of values is unknown. For that, create a FormArray.
-skills: new FormArray([]);
-inside the FormGroup and push values as we get them.
-To push values, add a method and pass the parameter. 
-Write a getter for this value, and make it as FormGroup and push it to the Array
-(this.form.get('skills') as FormArray).push( new FormControl(skills.value) )
-Use the removeAt() method and pass the index to remove an element from FormArray.

Use FormBuilder to optimise your code.
-Inside the constructor, create a FormBuilder.
 =constructor(fb: FormBuilder)
-You can create group, control or array using fb var.
 =fb.group/control/array
 =fb.group({ key: ['', validators.required] })
 =[] - represents a new instance of FormControl being created
 =To create an array, skills: fb.array([])
-Using FormBuilder, we can return all the formControls with single getter method.
 =get fc(){ return this.form.controls }

To create a custom validator,
-Create a folder and inside, create file with .validators.ts as extension
 =import AbstractControl and ValidationErrors modules
 =set control with type as AbstractControl as parameter
 =set ValidationErrors | null as return type
 =get control.value as req type
 =Create the method as static to avoid creating an instance of the class for accessing the method
 =Export the class
 =Return a key: true if there is an issue and null otherwise
 =export class SpaceValidator{ static spaceValidator(control: AbstractControl): ValidationErrors | null{ val = control.value as string; return { noSpaceValidator: true; } } }
-Import in the component

To use angular routing mechanism,
-Import RouterModule 
-Add RouterModule in the imports
-Add a method forRoot() and define path and components for routing.
-We can add a parameter to the path as well
 =RouterModule.forRoot([{path: 'posts/:id', component: PostListComponent}])
 =This component will be loaded when this path is accessed
-Create a router-outlet tag in the parent component
-Add routerLink attribute to an html element to route to a path when that element is clicked
 =<button [routerLink] = "['/post', index]"
 =Set routerLink to "/" to navigate back to the home page.
-Put an attribute, routerLinkActive and pass a class to an html element with routerLink to modify active state.
-To capture the router parameter, add ActivatedRoute module
 =In the constructor, add an instance of the activated route as private
 =private route: ActivatedRoute
 =paramMap - Used to get the parameters.
 =This only works if we use the method subscribe
 =The subscribe method takes a method as input.
 =this.route.paramMap.subscribe(value => { let id = value.get('id') }

Time out function is used to wait for a certain period of time before execution.
-It accepts a function and time in ms as parameters.
-setTimeOut( () => { console.log('Timeout') }, 2000);

Query parameter - Optional router parameter
-For this, add another attribute, [queryParams] = {values}
-To catch the parameters, use this.route.queryParamMap

It is better to put all routing operations in a seperate file
-For this, add a routing module and associate it with a module
 =ng g module module_name --module module_name --flat
 =The --flat will create the module in the root folder itself
-Inside the module, import RouterModule
-Add RouterModule as exports
-and define RouterModule.forRoot() in imports

To use routing inside a fn in a component,
-Add Router service in the component
-Inside the method, use this.router.navigate(path)

Wild card routing - Create a component. Give path as '**' and target as this component
-Always add wild card router at the end of the router list